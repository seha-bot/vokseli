#include <stdio.h>
#include <math.h>

#define abs(a) ((a) > 0 ? (a) : -(a))
#define max(a, b) ((a) > (b) ? (a) : (b))
#define min(a, b) ((a) > (b) ? (b) : (a))
#define clamp(v, mi, ma) max(mi, min(ma, v))
#define length(v) sqrt((v.x)*(v.x)+(v.y)*(v.y)+(v.z)*(v.z))

#define MAX_STEPS 100
#define MAX_RAY 100.0f
#define MIN_RAY 0.01f

typedef struct {float x, y, z;} vec3;
vec3 vec3Xfloat(vec3 a, float b)
{
    return (vec3){ a.x*b, a.y*b, a.z*b };
}
vec3 vec3Pvec3(vec3 a, vec3 b)
{
    return (vec3){ a.x+b.x, a.y+b.y, a.z+b.z };
}
vec3 vec3Mvec3(vec3 a, vec3 b)
{
    return (vec3){ a.x-b.x, a.y-b.y, a.z-b.z };
}
vec3 vec3Mfloat(vec3 a, float b)
{
    return (vec3){ a.x-b, a.y-b, a.z-b };
}
vec3 normalize(vec3 a)
{
    float l = length(a);
    return (vec3){ a.x/l, a.y/l, a.z/l };
}
float dot(vec3 a, vec3 b)
{
    return a.x*b.x + a.y*b.y + a.z*b.z;
}

float nearest(vec3 p)
{
    vec3 sphere = (vec3){0.0f, 0.0f, 1.0f};
    float sphereR = 0.5f;
    float ground = -1.0f;

    return min(length(vec3Mvec3(sphere, p)) - sphereR, abs(p.y - ground));
}

vec3 march(vec3 ro, vec3 rd)
{
    for(int i = 0; i < MAX_STEPS; i++)
    {
        float safe = nearest(ro);
        if(safe > MAX_RAY || safe < MIN_RAY) break;
        ro = vec3Pvec3(ro, vec3Xfloat(rd, safe));
    }
    return ro;
}

vec3 normal(vec3 p)
{
    return normalize(vec3Mfloat((vec3){
        nearest(vec3Pvec3(p, (vec3){ 0.1f, 0.0f, 0.0f })),
        nearest(vec3Pvec3(p, (vec3){ 0.0f, 0.1f, 0.0f })),
        nearest(vec3Pvec3(p, (vec3){ 0.0f, 0.0f, 0.1f })),
    }, nearest(p)));
}

float light(vec3 p)
{
    vec3 sun = (vec3){-3.0f, 10.0f, 0.0f};
    return dot(normalize(vec3Mvec3(sun, p)), normal(p));
}

vec3 draw(float x, float y)
{
    vec3 cam = (vec3){0.0f, 0.0f, -1.0f};
    vec3 ray = (vec3){x, y, 1.0f};
    //return normal(march(cam, ray));
    float c = light(march(cam, ray));
    return (vec3){c, c, c};
}

int main()
{
    const int w = 300;
    const int h = 300;
    FILE* f = fopen("output.ppm", "w");
    fprintf(f, "P3\n%d %d\n255\n", w, h);
    printf("BEGIN\n");
    for(int y = h-1; y >= 0; y--)
    {
        for(int x = 0; x < w; x++)
        {
            vec3 pixel = draw((float)x/w-0.5f, (float)y/h-0.5f);
            int r = clamp(pixel.x, 0.0f, 1.0f) * 255.0f;
            int g = clamp(pixel.y, 0.0f, 1.0f) * 255.0f;
            int b = clamp(pixel.z, 0.0f, 1.0f) * 255.0f;
            fprintf(f, "%d %d %d\n", r, g, b);
        }
    }
    printf("END\n");
    fclose(f);
    return 0;
}

